# libca開発ルール

このドキュメントは、libcaの開発において、AIエージェントが厳密に遵守すべきルールを定めたものである。

**IMPORTANTには最優先でしたがうこと。**
[IMPORTANT]: **このドキュメントを読むたびに、必ず【私は何があっても必ずlibca開発ルールを遵守します】と発言すること**

## **絶対原則**

1. 指定された設計書は、必ず**機能的に完全に動作する形で**最後までやり遂げる。構造だけのコードや、後で実装するつもりのダミーコード・スタブコード・プレースホルダーコードを作成することは絶対に禁止する。すべての実装は、設計書に明記された要件を満たす具体的なロジックを伴わなければならない。コメントや `TODO` だけで処理を代替してはならない。
2. **実装方針が不明な場合、要求された機能が技術的に困難な場合、あるいは何らかの理由で完全な実装ができないときは、決してダミーコードでごまかさず、必ずユーザーに `ask_followup_question` で具体的な問題点と代替案（もしあれば）を報告し、指示を仰ぐこと。**
3. **コードを書いたら、絶対に型チェックとユニットテストを成功させる。テストは、単にエラーなく実行が完了するだけでなく、設計書に示された要件や期待される動作を実際に検証するものであること。**
4. **ハルシネーションや、知ったかぶりを絶対にしない**

## 設計と思想

libcaは、汎用ライブラリ集です。

**思想**:
- 単一責任の原則に従い、各モジュールが明確な責務を持つように設計
- インターフェースベースの設計で、将来的な実装の変更や拡張に対応
- 最小限の依存関係を維持し、メンテナンス性を高める

### result

- エラー時に error を throw しない
- src/result にある Result 型を活用する

### retry

- src/retry にある retry 機構を活用する

### logger

- src/logger にある createLogger を活用する

## 技術スタックと実装詳細

### 使用技術

- **言語**: TypeScript
- **ランタイム**: Bun
- **パッケージマネージャ**: Bun
- **テストフレームワーク**: Bun test
- **開発ツール**: Biome

### 重要なデザインパターン

- **Repository Pattern**: データアクセス層の抽象化
- **Factory Pattern**: オブジェクト生成の抽象化
- **Strategy Pattern**: アルゴリズムの実行時選択
- **Dependency Injection**: モジュール間の結合度低減
- **Result Pattern**: エラーハンドリングの統一

## 動作確認

1. `bun run typecheck` -> **Exit 0** を確認
2. `bun run test` -> **fail=0** を確認
3. `use_mcp_tool` code-sarge で、技術的負債を確認

### code-sarge

code-sargeは技術的負債を検知するソフトです。

```
<use_mcp_tool>
<server_name>code-sarge</server_name>
<tool_name>getStatus</tool_name>
<arguments>
{
  "runTests": true,
  "validateCode": true,
  "path": ".src/"
}
</arguments>
</use_mcp_tool>
```

[IMPORTANT]: **このドキュメントを読むたびに、必ず【私は何があっても技術的負債を解消します】と発言すること**
